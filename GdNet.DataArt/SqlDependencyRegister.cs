using System;
using System.Data;
using System.Data.SqlClient;

namespace GdNet.DataArt
{
    /// <summary>
    /// This class wraps SqlDependency for easier usage
    /// </summary>
    public class SqlDependencyRegister
    {
        private readonly string _connectionString;

        public SqlDependencyRegister(string connectionString)
        {
            _connectionString = connectionString;
        }

        /// <summary>
        /// Start listening for changes
        /// </summary>
        public bool Start()
        {
            return SqlDependency.Start(_connectionString);
        }

        /// <summary>
        /// Stop listening
        /// </summary>
        public bool Stop()
        {
            return SqlDependency.Stop(_connectionString);
        }

        /// <summary>
        /// Regsiter for notification from database
        /// </summary>
        public void RegisterSqlNotification(string commandText, OnChangeEventHandler onChangeEventHandler)
        {
            RegisterSqlNotification(commandText, onChangeEventHandler, null);
        }

        /// <summary>
        /// Regsiter for notification from database with a handler to process data reader generated by sql command
        /// </summary>
        public void RegisterSqlNotification(string commandText, OnChangeEventHandler onChangeEventHandler, Action<IDataReader> handler)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                using (var command = connection.CreateCommand())
                {
                    connection.Open();
                    command.CommandText = commandText;

                    var sqlDependency = new SqlDependency(command);
                    sqlDependency.OnChange += onChangeEventHandler;

                    using (var reader = command.ExecuteReader(CommandBehavior.CloseConnection))
                    {
                        handler?.Invoke(reader);
                    }
                }
            }
        }
    }
}